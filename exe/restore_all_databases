#!/usr/bin/env ruby
require 'parallel'
require_relative '../lib/mongo_cluster'
require_relative '../lib/mongo_cluster/restore'
require_relative '../lib/mongo_cluster/dump'
require_relative '../lib/aws/sns'

class Databases

  attr_reader :names

  def initialize
    @names = Queue.new
    MongoCluster::Dump
        .path
        .each_child(false) do |child|
      next unless child.fnmatch?('*.gz')
      next if child.fnmatch?('local*')
      child
          .basename
          .sub_ext('')
          .to_s
          .tap {|database_name| names.push(database_name)}
    end
  end

  def next_name
    names.shift unless names.empty?
  end

end

databases = Databases.new
Parallel.each( -> {databases.next_name || Parallel::Stop}, in_threads: 5) do |database_name|
  puts database_name
  Aws::Sns.publish_exception(skip: true) do
    MongoCluster::Restore.from_file(database_name: database_name)
  end
end
Aws::Sns.publish('restore done')